h1.docs-page-title Panes

section.docs-section
  a[href="#basics"]
    h2#basics Basics
  markdown:
    Panes are for placing a box around your content. Use the `pane` class, and within, place your content in `pane__body`.

  ruby:
    pane_data_simple = {
      body: 'This is a basic panel with some content.</h4><p>Bacon ipsum dolor sit amet pastrami ham tongue jerky. Corned beef short ribs short loin ham doner t-bone beef ribs pork chop brisket pancetta chuck flank chicken.',
    }

  .row:.col:pre.code-sample-static.language-markup:code
    = render_source 'interfaces/templates/pane'

  = render 'interfaces/templates/pane', mustache: pane_data_simple

section.docs-section
  a[href="#basics"]
    h2#modifiers Modifiers
  markdown:
    You can change the appearance of your panes with modifier classes.

  ruby:
    pane_data_modified = {
      body: 'This is a basic panel with some content.</h4><p>Bacon ipsum dolor sit amet pastrami ham tongue jerky. Corned beef short ribs short loin ham doner t-bone beef ribs pork chop brisket pancetta chuck flank chicken.',
      pane_modifiers: [
        { modifier: 'pane--naked', description: 'Gives the pane a translucent background so that it can blend in with its surroundings.' },
        { modifier: 'pane--muted', description: 'Lower background contrast, for old eyes.' }
      ]
    }

  .row:.col:pre.code-sample-static.language-markup:code
    = render_source 'interfaces/templates/pane_modified'

  = render 'interfaces/templates/panes/pane_modifier_list', mustache: pane_data_modified

section.docs-section
  a[href="#complete"]
    h2#complete Complete
  markdown:
    Add hierachy to your panes with `pane__header` and `pane__footer`.

  ruby:
    pane_data_complete = {
      header: 'This is a simple pane',
      body: '<h4>This is a basic panel with some content.</h4><p>Bacon ipsum dolor sit amet pastrami ham tongue jerky. Corned beef short ribs short loin ham doner t-bone beef ribs pork chop brisket pancetta chuck flank chicken.</p>',
      footer: '...and a simple footer'
    }

  .row:.col:pre.code-sample-static.language-markup:code
    = render_source 'interfaces/templates/pane_complete'

  = render 'interfaces/templates/pane_complete', mustache: pane_data_complete

section.docs-section
  a[href="#splits"]
    h2#splits Splits
  markdown:
    Use multiple panes together with pane splits. Wrap your pane splits in `pane-group`. For widths, use `col--` modifier classes from the [grid](/styleguide/grids). Don't use `row` from the grid.

  .row:.col:pre.code-sample-static.language-markup:code
    = render_source 'interfaces/templates/pane_splits'

  = render 'interfaces/templates/pane_splits'


section.docs-section
  a[href="#block-list"]
    h2#block-list Block List
  markdown:
    Block lists are, uh, block-level list items that ignore the padding of the `pane__body` and span all the way to the edges of the pane.

  ruby:
    block_list_items = [
      { item: 'T-bone chicken' },
      { item: 'Leberkas pork belly' },
      { item: 'Ball tip chicken meatball' },
      { item: 'Hamburger pork chop filet mignon' }
    ]

  .row:.col:pre.code-sample-static.language-markup:code
    = render_source 'interfaces/templates/pane_block_list'

  = render 'interfaces/templates/pane_block_list', mustache: { block_list_items: block_list_items }
