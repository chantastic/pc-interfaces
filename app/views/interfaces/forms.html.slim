h1.docs-page-title Forms
markdown:
  Forms are in a state of flux. Don't panic, I'm trying to make the transition
  as painless as possible.  

  What you need to know is that there are two ways to style form elements in
  your app. `input` will get styling with additional classes. `select` requires
  the addition of the class `.select`.  

  All form elements are 100% width. Use the grid to contstrain them to a layout.

section.docs-section
  a[href="#text-inputs"]
    h2#text-inputs Text Inputs

  .row:.col:pre.code-sample-static.language-markup:code
    = render_source 'interfaces/templates/input_text'

  form
    .row
      .col
        = render 'interfaces/templates/input_text',
                  :mustache => { label: 'A text input', placeholder: 'Put something here...' }

section.docs-section
  a[href="#layout"]
    h2#layout Layout
  markdown:
    For laying out your forms, use the [grid](/styleguide/grids/) to wrap your elements.

  .row:.col:pre.code-sample-static.language-markup:code

    = render_source 'interfaces/templates/input_text_layout'

  form
    .row
      .col.col--half
        = render 'interfaces/templates/input_text',
              :mustache => { label: 'A text input', placeholder: 'Put something here...' }
      .col.col--half
        = render 'interfaces/templates/input_text',
              :mustache => { label: 'A text input', placeholder: 'Put something here...' }
    .row
      .col
        = render 'interfaces/templates/input_textarea',
                  :mustache => { label: 'Lots to say?', placeholder: 'Tell us about it...' }

section.docs-section
  a[href="#selects"]
    h2#selects Selects

  ruby:
    select_options = [
      { val: "capicola",   text: "Capicola"   },
      { val: "proscuitto", text: "Prosciutto" },
      { val: "kielbasa",   text: "Kielbasa"   },
      { val: "salami",     text: "Salami"     }
    ]

  markdown:
    Interfaces ships with CSS-only styling for native select elements. It leaves
    more complex select interactions up to the application and product manager.

    You may be surprised to find that these selects are not consistent between
    browsers. I sacrificed cross-browser consistency-an experience that moste
    users don't have-for browser-conformity. Older browsers will render
    differently but all browsers should look mostly reasonable.

  form
    .row
      markdown:
        #### Select
        Add the `select` class to your `select` element.
      .row:.col:pre.code-sample-static.language-markup:code
        = render_source 'interfaces/templates/input_select'
      = render 'interfaces/templates/input_select',
                :mustache => { label: 'Select a sausage', select_data: select_options }

  markdown:
    ### A Word on Select2

    Select2 may still be useful for more complex selects, where search and
    async-loading may be a requirement. However, loading and maintaining Select2
    is now an application-level concern.

section.docs-section
  a[href="#checkboxes"]
    h2#selects Checkboxes

  .row
    .col
      .row:.col:pre.code-sample-static.language-markup:code
        = render_source 'interfaces/templates/input_custom_checkbox'
  .row
    .col
      = render 'interfaces/templates/input_custom_checkbox'

section.docs-section
  markdown:
    **TODO**

    {: .demo-list}
    * checkbox group (extract from buttons)

